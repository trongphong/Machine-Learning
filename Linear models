{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-24T21:02:07.632603Z","iopub.execute_input":"2024-09-24T21:02:07.633540Z","iopub.status.idle":"2024-09-24T21:02:08.124024Z","shell.execute_reply.started":"2024-09-24T21:02:07.633497Z","shell.execute_reply":"2024-09-24T21:02:08.122692Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:05:11.588392Z","iopub.execute_input":"2024-09-24T21:05:11.588806Z","iopub.status.idle":"2024-09-24T21:05:11.594420Z","shell.execute_reply.started":"2024-09-24T21:05:11.588774Z","shell.execute_reply":"2024-09-24T21:05:11.593270Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"train=pd.read_csv('/kaggle/input/titanic/train.csv')\ntest= pd.read_csv('/kaggle/input/titanic/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:02:08.991183Z","iopub.execute_input":"2024-09-24T21:02:08.991892Z","iopub.status.idle":"2024-09-24T21:02:09.024373Z","shell.execute_reply.started":"2024-09-24T21:02:08.991846Z","shell.execute_reply":"2024-09-24T21:02:09.023147Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train=train.drop(['Cabin', 'Ticket', 'PassengerId'], axis=1)\ntest=test.drop(['Cabin', 'Ticket', 'PassengerId'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:02:09.027641Z","iopub.execute_input":"2024-09-24T21:02:09.028130Z","iopub.status.idle":"2024-09-24T21:02:09.047578Z","shell.execute_reply.started":"2024-09-24T21:02:09.028087Z","shell.execute_reply":"2024-09-24T21:02:09.046536Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"train['Title']=train['Name'].str.extract(r'(\\w+)\\.')\ntest['Title']=test['Name'].str.extract(r'(\\w+)\\.')\ntrain=train.drop('Name', axis=1)\ntest=test.drop('Name', axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:02:09.049098Z","iopub.execute_input":"2024-09-24T21:02:09.049551Z","iopub.status.idle":"2024-09-24T21:02:09.070572Z","shell.execute_reply.started":"2024-09-24T21:02:09.049520Z","shell.execute_reply":"2024-09-24T21:02:09.069502Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"train['Title']=train['Title'].replace([ 'Lady','Don', 'Rev', 'Dr', 'Major','Col', 'Sir','Capt', 'Countess','Jonkheer'], 'rare')\ntrain['Title']=train['Title'].replace(['Mlle','Ms'], 'Mrs')\ntrain['Title']=train['Title'].replace('Mme', 'Miss')\ntest['Title']=test['Title'].replace([ 'Lady','Don','Dona', 'Rev', 'Dr', 'Major','Col', 'Sir','Capt', 'Countess','Jonkheer'], 'rare')\ntest['Title']=test['Title'].replace(['Mlle','Ms'], 'Mrs')\ntest['Title']=test['Title'].replace('Mme', 'Miss')","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:02:09.072239Z","iopub.execute_input":"2024-09-24T21:02:09.072704Z","iopub.status.idle":"2024-09-24T21:02:09.091386Z","shell.execute_reply.started":"2024-09-24T21:02:09.072626Z","shell.execute_reply":"2024-09-24T21:02:09.090050Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":"### Label Encoder","metadata":{}},{"cell_type":"code","source":"Enco=LabelEncoder()\nEnco.fit(train['Sex'])\ntrain['Sex']=Enco.transform(train['Sex'])\ntest['Sex']=Enco.transform(test['Sex'])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:02:09.093540Z","iopub.execute_input":"2024-09-24T21:02:09.093925Z","iopub.status.idle":"2024-09-24T21:02:09.102392Z","shell.execute_reply.started":"2024-09-24T21:02:09.093893Z","shell.execute_reply":"2024-09-24T21:02:09.100983Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"Enco.fit(train['Embarked'])\ntrain['Embarked']=Enco.transform(train['Embarked'])\ntest['Embarked']=Enco.transform(test['Embarked'])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:02:09.104151Z","iopub.execute_input":"2024-09-24T21:02:09.105240Z","iopub.status.idle":"2024-09-24T21:02:09.118317Z","shell.execute_reply.started":"2024-09-24T21:02:09.105179Z","shell.execute_reply":"2024-09-24T21:02:09.116911Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"Enco.fit(train['Title'])\ntrain['Title']=Enco.transform(train['Title'])\ntest['Title']=Enco.transform(test['Title'])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:02:09.119697Z","iopub.execute_input":"2024-09-24T21:02:09.120095Z","iopub.status.idle":"2024-09-24T21:02:09.134025Z","shell.execute_reply.started":"2024-09-24T21:02:09.120053Z","shell.execute_reply":"2024-09-24T21:02:09.132612Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:02:09.139868Z","iopub.execute_input":"2024-09-24T21:02:09.140578Z","iopub.status.idle":"2024-09-24T21:02:09.163447Z","shell.execute_reply.started":"2024-09-24T21:02:09.140542Z","shell.execute_reply":"2024-09-24T21:02:09.162324Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked  Title\n0         0       3    1  22.0      1      0   7.2500         2      2\n1         1       1    0  38.0      1      0  71.2833         0      3\n2         1       3    0  26.0      0      0   7.9250         2      1\n3         1       1    0  35.0      1      0  53.1000         2      3\n4         0       3    1  35.0      0      0   8.0500         2      2","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X=train.drop(['Survived'], axis=1)\ny=train['Survived']","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### KNN imputer\nUsing k-Nearest Neighbors to complete the missing values","metadata":{}},{"cell_type":"code","source":"from sklearn.impute import KNNImputer\nImpKnn=KNNImputer(n_neighbors=10)\nImpKnn.fit(train)\ntrain['Age']=ImpKnn.fit_transform(train[['Age']])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:02:09.164749Z","iopub.execute_input":"2024-09-24T21:02:09.165277Z","iopub.status.idle":"2024-09-24T21:02:09.483353Z","shell.execute_reply.started":"2024-09-24T21:02:09.165216Z","shell.execute_reply":"2024-09-24T21:02:09.482391Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:29:54.403300Z","iopub.execute_input":"2024-09-24T21:29:54.404330Z","iopub.status.idle":"2024-09-24T21:29:54.409438Z","shell.execute_reply.started":"2024-09-24T21:29:54.404290Z","shell.execute_reply":"2024-09-24T21:29:54.408144Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"columns=train.columns\nfor i in columns:\n    scale=MinMaxScaler()\n    scaler.fit(train[i].values.reshape(-1,1))\n    train[i]=scaler.transform(train[i].values.reshape(-1,1))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Model","metadata":{}},{"cell_type":"code","source":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:48:24.658127Z","iopub.execute_input":"2024-09-24T21:48:24.658558Z","iopub.status.idle":"2024-09-24T21:48:24.667429Z","shell.execute_reply.started":"2024-09-24T21:48:24.658525Z","shell.execute_reply":"2024-09-24T21:48:24.666194Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"markdown","source":"### Linear models\nThe linear models set of methods in which the target value is expected to be a linear combination of the features. In mathematical notation, the prediced function is given by \n$$ y_{train}=\\omega_0+\\omega_1 x_1+\\omega_2 x_2+... +\\omega_n x_n $$\nThe loss function is given by\n$$L(w)=\\|X_{\\text{train}}w -y_{\\text{train}}\\|_2^2+\\text{penalty function}.$$\n#### Rigde\nPenalty function is defined by $p(\\omega)=\\frac{1}{2}\\|\\omega\\|^2_2$.\n#### Lasso\n$p(\\omega)=\\|\\omega\\|_1$.\n#### Elastic\n$p(\\omega)=\\frac{1-\\rho}{2}\\|\\omega\\|^2_2+\\rho \\|\\omega\\|_1$.\n\n     ","metadata":{}},{"cell_type":"markdown","source":"### Rigde classification\nThe loss function is given by\n $$L(w)=\\|X_{\\text{train}}w -y_{\\text{train}}\\|_2^2+\\alpha \\|w\\|^2_2$$\nTo minimize the loss function $L$, we use the gradient method, which is defined as follow\n$$w_{n+1}=w_n+\\lambda \\nabla L(w_n)$$","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, auc, accuracy_score,roc_auc_score, precision_score, roc_curve\nfrom sklearn import linear_model\nLnRg=linear_model.RidgeClassifier()\nLnRg.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:48:32.994173Z","iopub.execute_input":"2024-09-24T21:48:32.995458Z","iopub.status.idle":"2024-09-24T21:48:33.012326Z","shell.execute_reply.started":"2024-09-24T21:48:32.995415Z","shell.execute_reply":"2024-09-24T21:48:33.010969Z"},"trusted":true},"execution_count":65,"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"RidgeClassifier()","text/html":"<style>#sk-container-id-15 {color: black;background-color: white;}#sk-container-id-15 pre{padding: 0;}#sk-container-id-15 div.sk-toggleable {background-color: white;}#sk-container-id-15 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-15 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-15 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-15 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-15 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-15 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-15 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-15 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-15 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-15 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-15 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-15 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-15 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-15 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-15 div.sk-item {position: relative;z-index: 1;}#sk-container-id-15 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-15 div.sk-item::before, #sk-container-id-15 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-15 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-15 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-15 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-15 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-15 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-15 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-15 div.sk-label-container {text-align: center;}#sk-container-id-15 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-15 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-15\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RidgeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" checked><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RidgeClassifier</label><div class=\"sk-toggleable__content\"><pre>RidgeClassifier()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Training set')\nprint('Matrix confusion: ', confusion_matrix(y_train,LnRg.predict(X_train)))\nprint('accuracy score: ', accuracy_score(y_train, LnRg.predict(X_train)))\nprint('Validation set')\nprint(confusion_matrix(y_val, LnRg.predict(X_val)))\nprint('Accuracy score', accuracy_score(y_val, LnRg.predict(X_val)))","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:48:34.469783Z","iopub.execute_input":"2024-09-24T21:48:34.470240Z","iopub.status.idle":"2024-09-24T21:48:34.493610Z","shell.execute_reply.started":"2024-09-24T21:48:34.470190Z","shell.execute_reply":"2024-09-24T21:48:34.492075Z"},"trusted":true},"execution_count":66,"outputs":[{"name":"stdout","text":"Training set\nMatrix confusion:  [[379  58]\n [ 83 192]]\naccuracy score:  0.8019662921348315\nValidation set\n[[95 17]\n [21 46]]\nAccuracy score 0.7877094972067039\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Logistic regression\nThe loss function is defined by \n$$L(w)=\\frac{1}{n}\\sum \\left( -y_i\\log (f(w_ix_i))-(1-y_i)\\log (1-f(w_ix_i)) \\right)+ \\text{penalty function} $$\nwhere $f$ is the logistic function, $f(s)=\\frac{1}{1+e^{-s}}.$\n- The penalty function: $l1, l2 \\text{ or Elasticnet} $.\n-  Optimization method: lbfgs, liblinear, newton-cg, newton-cholesky, sag, saga. Default is 'lbfgs'","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nLogReg=LogisticRegression(max_iter=10000)\nLogReg.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:48:43.359321Z","iopub.execute_input":"2024-09-24T21:48:43.360440Z","iopub.status.idle":"2024-09-24T21:48:43.403441Z","shell.execute_reply.started":"2024-09-24T21:48:43.360401Z","shell.execute_reply":"2024-09-24T21:48:43.402302Z"},"trusted":true},"execution_count":67,"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"LogisticRegression(max_iter=10000)","text/html":"<style>#sk-container-id-16 {color: black;background-color: white;}#sk-container-id-16 pre{padding: 0;}#sk-container-id-16 div.sk-toggleable {background-color: white;}#sk-container-id-16 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-16 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-16 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-16 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-16 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-16 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-16 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-16 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-16 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-16 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-16 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-16 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-16 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-16 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-16 div.sk-item {position: relative;z-index: 1;}#sk-container-id-16 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-16 div.sk-item::before, #sk-container-id-16 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-16 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-16 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-16 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-16 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-16 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-16 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-16 div.sk-label-container {text-align: center;}#sk-container-id-16 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-16 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-16\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=10000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" checked><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=10000)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Resultats on the training set:')\nprint('Congusion matrix: ', confusion_matrix(y_train, LogReg.predict(X_train)))\nprint('Accuracy score: ', accuracy_score(y_train, LogReg.predict(X_train)))\nprint('Roc auc score: ', roc_auc_score(y_train,  LogReg.predict(X_train)))\nprint('Resultats on the val set:')\nprint('Congusion matrix: ', confusion_matrix(y_val, LogReg.predict(X_val)))\nprint('Accuracy score: ', accuracy_score(y_val, LogReg.predict(X_val)))\nprint('Roc-AUC score: ',roc_auc_score(y_val,  LogReg.predict(X_val)))","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:48:46.703441Z","iopub.execute_input":"2024-09-24T21:48:46.703832Z","iopub.status.idle":"2024-09-24T21:48:46.734857Z","shell.execute_reply.started":"2024-09-24T21:48:46.703804Z","shell.execute_reply":"2024-09-24T21:48:46.733761Z"},"trusted":true},"execution_count":68,"outputs":[{"name":"stdout","text":"Resultats on the training set:\nCongusion matrix:  [[383  54]\n [ 83 192]]\nAccuracy score:  0.8075842696629213\nRoc auc score:  0.7873060120657375\nResultats on the val set:\nCongusion matrix:  [[98 14]\n [21 46]]\nAccuracy score:  0.8044692737430168\nRoc-AUC score:  0.7807835820895522\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### SGDClassification\n - We use the SGD (mini-batch) to optimize the loss function.\n -Loss function: hinge (that gives the SVM), log-loss (logistic regression), perceptron.\n -Penalty function: $l_1, l_2 \\text{ or elasticnet}$\n","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import SGDClassifier","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:08:18.526637Z","iopub.execute_input":"2024-09-24T21:08:18.527396Z","iopub.status.idle":"2024-09-24T21:08:18.532522Z","shell.execute_reply.started":"2024-09-24T21:08:18.527359Z","shell.execute_reply":"2024-09-24T21:08:18.531134Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"SgdClf=SGDClassifier(loss='log_loss', tol=None, max_iter=200000)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:48:57.322756Z","iopub.execute_input":"2024-09-24T21:48:57.323577Z","iopub.status.idle":"2024-09-24T21:48:57.328415Z","shell.execute_reply.started":"2024-09-24T21:48:57.323539Z","shell.execute_reply":"2024-09-24T21:48:57.327290Z"},"trusted":true},"execution_count":69,"outputs":[]},{"cell_type":"code","source":"SgdClf.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:48:58.608852Z","iopub.execute_input":"2024-09-24T21:48:58.609413Z","iopub.status.idle":"2024-09-24T21:49:14.060631Z","shell.execute_reply.started":"2024-09-24T21:48:58.609365Z","shell.execute_reply":"2024-09-24T21:49:14.059373Z"},"trusted":true},"execution_count":70,"outputs":[{"execution_count":70,"output_type":"execute_result","data":{"text/plain":"SGDClassifier(loss='log_loss', max_iter=200000, tol=None)","text/html":"<style>#sk-container-id-17 {color: black;background-color: white;}#sk-container-id-17 pre{padding: 0;}#sk-container-id-17 div.sk-toggleable {background-color: white;}#sk-container-id-17 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-17 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-17 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-17 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-17 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-17 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-17 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-17 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-17 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-17 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-17 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-17 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-17 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-17 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-17 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-17 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-17 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-17 div.sk-item {position: relative;z-index: 1;}#sk-container-id-17 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-17 div.sk-item::before, #sk-container-id-17 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-17 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-17 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-17 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-17 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-17 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-17 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-17 div.sk-label-container {text-align: center;}#sk-container-id-17 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-17 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-17\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDClassifier(loss=&#x27;log_loss&#x27;, max_iter=200000, tol=None)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" checked><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier(loss=&#x27;log_loss&#x27;, max_iter=200000, tol=None)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Resultats on the training set:')\nprint('Congusion matrix: ', confusion_matrix(y_train, SgdClf.predict(X_train)))\nprint('Accuracy score: ', accuracy_score(y_train, SgdClf.predict(X_train)))\nprint('Roc auc score: ', roc_auc_score(y_train,  SgdClf.predict(X_train)))\nprint('Resultats on the val set:')\nprint('Congusion matrix: ', confusion_matrix(y_val, SgdClf.predict(X_val)))\nprint('Accuracy score: ', accuracy_score(y_val, SgdClf.predict(X_val)))\nprint('Roc-AUC score: ',roc_auc_score(y_val,  SgdClf.predict(X_val)))","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:49:14.062847Z","iopub.execute_input":"2024-09-24T21:49:14.063330Z","iopub.status.idle":"2024-09-24T21:49:14.095723Z","shell.execute_reply.started":"2024-09-24T21:49:14.063287Z","shell.execute_reply":"2024-09-24T21:49:14.094545Z"},"trusted":true},"execution_count":71,"outputs":[{"name":"stdout","text":"Resultats on the training set:\nCongusion matrix:  [[378  59]\n [ 79 196]]\nAccuracy score:  0.8061797752808989\nRoc auc score:  0.7888579155398379\nResultats on the val set:\nCongusion matrix:  [[94 18]\n [21 46]]\nAccuracy score:  0.7821229050279329\nRoc-AUC score:  0.7629264392324094\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Support vector machine\nThe problem of finding the optimal margin \n\\begin{align*}\n\\min_{\\gamma, w, b} &\\frac{1}{2} \\|w\\|^2\\\\\n\\text{s.t: }& y^{(i)}(wx^{(i)}+b)\\geq 1\n\\end{align*}\nThe Lagrangian function is given by\n$$L(w,b,\\alpha)=\\frac{1}{2} \\|w\\|^2-\\sum_{i=1}^{m} \\alpha_i\\left[y^{(i)} (wx^{(i)}+b)-1\\right].$$\nBy solving the dual optimizatio problem, we obtain the problem\n \\begin{align*}\n \\max_{\\alpha} &\\sum_{i=1}^{m} \\alpha_i-\\frac{1}{2}\\sum_{i,j=1}^{m} y^iy^j\\alpha_i \\alpha_j x^i x^j\\\\\n \\text{s.t: }& \\sum \\alpha_i y^{(i)}=0\\\\\n &\\alpha_i\\geq 0.\n \\end{align*}\n The product $x^i x^j$ can by generared by any produit scalar $<x^i, x^j>=\\Omega(x^i)\\Omega^T(x^j)$  \n#### Regularization and non-separable\nWe study the loss function in the form following\n \\begin{align*}\n \\min_{\\gamma, w, b} &\\frac{1}{2} \\|w\\|^2+C\\sum \\xi_i \\\\\n \\text{s.t: }& y^{(i)}(wx^{(i)}+b)\\geq (1-\\xi_i)\\\\\n & \\psi_i\\geq 0.\n \\end{align*}\n The dual optimization problem of Lagrange function is given by\n \\begin{align*}\n \\max_{\\alpha} &\\sum_{i=1}^{m} \\alpha_i-\\frac{1}{2}\\sum_{i,j=1}^{m} y^iy^j\\alpha_i \\alpha_j x^i x^j\\\\\n \\text{s.t: }& \\sum \\alpha_i y^{(i)}=0\\\\\n &0\\leq \\alpha_i\\leq C.\n \\end{align*}","metadata":{}},{"cell_type":"code","source":"from sklearn.svm import SVC\nsvc=SVC(kernel='linear', tol=0.00001)\nsvc.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:22:54.488259Z","iopub.execute_input":"2024-09-24T21:22:54.488645Z","iopub.status.idle":"2024-09-24T21:22:56.257434Z","shell.execute_reply.started":"2024-09-24T21:22:54.488617Z","shell.execute_reply":"2024-09-24T21:22:56.256287Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"SVC(kernel='linear', tol=1e-05)","text/html":"<style>#sk-container-id-12 {color: black;background-color: white;}#sk-container-id-12 pre{padding: 0;}#sk-container-id-12 div.sk-toggleable {background-color: white;}#sk-container-id-12 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-12 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-12 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-12 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-12 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-12 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-12 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-12 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-12 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-12 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-12 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-12 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-12 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-12 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-12 div.sk-item {position: relative;z-index: 1;}#sk-container-id-12 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-12 div.sk-item::before, #sk-container-id-12 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-12 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-12 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-12 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-12 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-12 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-12 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-12 div.sk-label-container {text-align: center;}#sk-container-id-12 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-12 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-12\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;, tol=1e-05)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" checked><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;, tol=1e-05)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Resultats on the training set:')\nprint('Congusion matrix: ', confusion_matrix(y_train, svc.predict(X_train)))\nprint('Accuracy score: ', accuracy_score(y_train, svc.predict(X_train)))\nprint('Roc auc score: ', roc_auc_score(y_train,  svc.predict(X_train)))\nprint('Resultats on the val set:')\nprint('Congusion matrix: ', confusion_matrix(y_val, svc.predict(X_val)))\nprint('Accuracy score: ', accuracy_score(y_val, svc.predict(X_val)))\nprint('Roc-AUC score: ',roc_auc_score(y_val,  svc.predict(X_val)))","metadata":{"execution":{"iopub.status.busy":"2024-09-24T21:22:56.259688Z","iopub.execute_input":"2024-09-24T21:22:56.260150Z","iopub.status.idle":"2024-09-24T21:22:56.314807Z","shell.execute_reply.started":"2024-09-24T21:22:56.260106Z","shell.execute_reply":"2024-09-24T21:22:56.313630Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"Resultats on the training set:\nCongusion matrix:  [[377  60]\n [ 93 182]]\nAccuracy score:  0.7851123595505618\nRoc auc score:  0.7622592053255669\nResultats on the val set:\nCongusion matrix:  [[93 19]\n [15 52]]\nAccuracy score:  0.8100558659217877\nRoc-AUC score:  0.8032382729211087\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}