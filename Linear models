{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-24T11:37:09.057624Z","iopub.execute_input":"2024-09-24T11:37:09.058113Z","iopub.status.idle":"2024-09-24T11:37:09.491035Z","shell.execute_reply.started":"2024-09-24T11:37:09.058079Z","shell.execute_reply":"2024-09-24T11:37:09.489601Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:09.493766Z","iopub.execute_input":"2024-09-24T11:37:09.495235Z","iopub.status.idle":"2024-09-24T11:37:10.274969Z","shell.execute_reply.started":"2024-09-24T11:37:09.495187Z","shell.execute_reply":"2024-09-24T11:37:10.273733Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train=pd.read_csv('/kaggle/input/titanic/train.csv')\ntest= pd.read_csv('/kaggle/input/titanic/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:39:31.336363Z","iopub.execute_input":"2024-09-24T11:39:31.336789Z","iopub.status.idle":"2024-09-24T11:39:31.354031Z","shell.execute_reply.started":"2024-09-24T11:39:31.336758Z","shell.execute_reply":"2024-09-24T11:39:31.352822Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"train.columns","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:39:32.711809Z","iopub.execute_input":"2024-09-24T11:39:32.712243Z","iopub.status.idle":"2024-09-24T11:39:32.721556Z","shell.execute_reply.started":"2024-09-24T11:39:32.712208Z","shell.execute_reply":"2024-09-24T11:39:32.720043Z"},"trusted":true},"execution_count":55,"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:39:34.460155Z","iopub.execute_input":"2024-09-24T11:39:34.460587Z","iopub.status.idle":"2024-09-24T11:39:34.480213Z","shell.execute_reply.started":"2024-09-24T11:39:34.460553Z","shell.execute_reply":"2024-09-24T11:39:34.478328Z"},"trusted":true},"execution_count":56,"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:10.368531Z","iopub.execute_input":"2024-09-24T11:37:10.368891Z","iopub.status.idle":"2024-09-24T11:37:10.401633Z","shell.execute_reply.started":"2024-09-24T11:37:10.368863Z","shell.execute_reply":"2024-09-24T11:37:10.400301Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"test.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:10.403107Z","iopub.execute_input":"2024-09-24T11:37:10.403437Z","iopub.status.idle":"2024-09-24T11:37:10.410962Z","shell.execute_reply.started":"2024-09-24T11:37:10.403403Z","shell.execute_reply":"2024-09-24T11:37:10.409608Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"(418, 11)"},"metadata":{}}]},{"cell_type":"code","source":"train=train.drop(['Cabin', 'Ticket', 'PassengerId'], axis=1)\ntest=test.drop(['Cabin', 'Ticket', 'PassengerId'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:39:43.372510Z","iopub.execute_input":"2024-09-24T11:39:43.372944Z","iopub.status.idle":"2024-09-24T11:39:43.381312Z","shell.execute_reply.started":"2024-09-24T11:39:43.372914Z","shell.execute_reply":"2024-09-24T11:39:43.379942Z"},"trusted":true},"execution_count":57,"outputs":[]},{"cell_type":"code","source":"train['Title']=train['Name'].str.extract(r'(\\w+)\\.')\ntest['Title']=test['Name'].str.extract(r'(\\w+)\\.')","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:40:02.973327Z","iopub.execute_input":"2024-09-24T11:40:02.973798Z","iopub.status.idle":"2024-09-24T11:40:02.988788Z","shell.execute_reply.started":"2024-09-24T11:40:02.973763Z","shell.execute_reply":"2024-09-24T11:40:02.987064Z"},"trusted":true},"execution_count":59,"outputs":[]},{"cell_type":"code","source":"train['Title']=train['Title'].replace([ 'Lady','Don', 'Rev', 'Dr', 'Major','Col', 'Sir','Capt', 'Countess','Jonkheer'], 'rare')\ntrain['Title']=train['Title'].replace(['Mlle','Ms'], 'Mrs')\ntrain['Title']=train['Title'].replace('Mme', 'Miss')\ntest['Title']=test['Title'].replace([ 'Lady','Don','Dona', 'Rev', 'Dr', 'Major','Col', 'Sir','Capt', 'Countess','Jonkheer'], 'rare')\ntest['Title']=test['Title'].replace(['Mlle','Ms'], 'Mrs')\ntest['Title']=test['Title'].replace('Mme', 'Miss')","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:40:04.696591Z","iopub.execute_input":"2024-09-24T11:40:04.697037Z","iopub.status.idle":"2024-09-24T11:40:04.716582Z","shell.execute_reply.started":"2024-09-24T11:40:04.697004Z","shell.execute_reply":"2024-09-24T11:40:04.714746Z"},"trusted":true},"execution_count":60,"outputs":[]},{"cell_type":"code","source":"train=train.drop('Name', axis=1)\ntest=test.drop('Name', axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:40:06.711371Z","iopub.execute_input":"2024-09-24T11:40:06.711826Z","iopub.status.idle":"2024-09-24T11:40:06.720466Z","shell.execute_reply.started":"2024-09-24T11:40:06.711791Z","shell.execute_reply":"2024-09-24T11:40:06.718421Z"},"trusted":true},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:40:08.421986Z","iopub.execute_input":"2024-09-24T11:40:08.422551Z","iopub.status.idle":"2024-09-24T11:40:08.439163Z","shell.execute_reply.started":"2024-09-24T11:40:08.422429Z","shell.execute_reply":"2024-09-24T11:40:08.437745Z"},"trusted":true},"execution_count":62,"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked Title\n0         0       3    male  22.0      1      0   7.2500        S    Mr\n1         1       1  female  38.0      1      0  71.2833        C   Mrs\n2         1       3  female  26.0      0      0   7.9250        S  Miss\n3         1       1  female  35.0      1      0  53.1000        S   Mrs\n4         0       3    male  35.0      0      0   8.0500        S    Mr","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>Mr</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>Mrs</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>Miss</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>Mrs</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>Mr</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:40:22.106596Z","iopub.execute_input":"2024-09-24T11:40:22.107044Z","iopub.status.idle":"2024-09-24T11:40:22.112860Z","shell.execute_reply.started":"2024-09-24T11:40:22.107010Z","shell.execute_reply":"2024-09-24T11:40:22.111578Z"},"trusted":true},"execution_count":63,"outputs":[]},{"cell_type":"markdown","source":"### Label Encoder","metadata":{}},{"cell_type":"code","source":"Enco=LabelEncoder()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:40:30.028141Z","iopub.execute_input":"2024-09-24T11:40:30.028547Z","iopub.status.idle":"2024-09-24T11:40:30.034992Z","shell.execute_reply.started":"2024-09-24T11:40:30.028516Z","shell.execute_reply":"2024-09-24T11:40:30.033884Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"code","source":"Enco.fit(train['Sex'])\ntrain['Sex']=Enco.transform(train['Sex'])\ntest['Sex']=Enco.transform(test['Sex'])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:40:30.796699Z","iopub.execute_input":"2024-09-24T11:40:30.797542Z","iopub.status.idle":"2024-09-24T11:40:30.804395Z","shell.execute_reply.started":"2024-09-24T11:40:30.797507Z","shell.execute_reply":"2024-09-24T11:40:30.803260Z"},"trusted":true},"execution_count":65,"outputs":[]},{"cell_type":"code","source":"Enco.fit(train['Embarked'])\ntrain['Embarked']=Enco.transform(train['Embarked'])\ntest['Embarked']=Enco.transform(test['Embarked'])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:40:34.864687Z","iopub.execute_input":"2024-09-24T11:40:34.865109Z","iopub.status.idle":"2024-09-24T11:40:34.872696Z","shell.execute_reply.started":"2024-09-24T11:40:34.865075Z","shell.execute_reply":"2024-09-24T11:40:34.871411Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"Enco.fit(train['Title'])\ntrain['Title']=Enco.transform(train['Title'])\ntest['Title']=Enco.transform(test['Title'])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:40:35.980744Z","iopub.execute_input":"2024-09-24T11:40:35.981154Z","iopub.status.idle":"2024-09-24T11:40:35.989137Z","shell.execute_reply.started":"2024-09-24T11:40:35.981116Z","shell.execute_reply":"2024-09-24T11:40:35.987929Z"},"trusted":true},"execution_count":67,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:10.689734Z","iopub.execute_input":"2024-09-24T11:37:10.690273Z","iopub.status.idle":"2024-09-24T11:37:10.714885Z","shell.execute_reply.started":"2024-09-24T11:37:10.690230Z","shell.execute_reply":"2024-09-24T11:37:10.713588Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked  \\\n0            1         0       3    1  22.0      1      0   7.2500         2   \n1            2         1       1    0  38.0      1      0  71.2833         0   \n2            3         1       3    0  26.0      0      0   7.9250         2   \n3            4         1       1    0  35.0      1      0  53.1000         2   \n4            5         0       3    1  35.0      0      0   8.0500         2   \n\n   Title  \n0      2  \n1      3  \n2      1  \n3      3  \n4      2  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:40:38.718064Z","iopub.execute_input":"2024-09-24T11:40:38.718463Z","iopub.status.idle":"2024-09-24T11:40:38.731139Z","shell.execute_reply.started":"2024-09-24T11:40:38.718431Z","shell.execute_reply":"2024-09-24T11:40:38.730165Z"},"trusted":true},"execution_count":68,"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"   Pclass  Sex   Age  SibSp  Parch     Fare  Embarked  Title\n0       3    1  34.5      0      0   7.8292         1      2\n1       3    0  47.0      1      0   7.0000         2      3\n2       2    1  62.0      0      0   9.6875         1      2\n3       3    1  27.0      0      0   8.6625         2      2\n4       3    0  22.0      1      1  12.2875         2      3","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>1</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>0</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>1</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>1</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:10.739402Z","iopub.execute_input":"2024-09-24T11:37:10.739886Z","iopub.status.idle":"2024-09-24T11:37:10.757851Z","shell.execute_reply.started":"2024-09-24T11:37:10.739843Z","shell.execute_reply":"2024-09-24T11:37:10.756266Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 10 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Sex          891 non-null    int64  \n 4   Age          714 non-null    float64\n 5   SibSp        891 non-null    int64  \n 6   Parch        891 non-null    int64  \n 7   Fare         891 non-null    float64\n 8   Embarked     891 non-null    int64  \n 9   Title        891 non-null    int64  \ndtypes: float64(2), int64(8)\nmemory usage: 69.7 KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Simple imputer","metadata":{}},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:10.759419Z","iopub.execute_input":"2024-09-24T11:37:10.759933Z","iopub.status.idle":"2024-09-24T11:37:10.776468Z","shell.execute_reply.started":"2024-09-24T11:37:10.759898Z","shell.execute_reply":"2024-09-24T11:37:10.775004Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 10 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Sex          891 non-null    int64  \n 4   Age          714 non-null    float64\n 5   SibSp        891 non-null    int64  \n 6   Parch        891 non-null    int64  \n 7   Fare         891 non-null    float64\n 8   Embarked     891 non-null    int64  \n 9   Title        891 non-null    int64  \ndtypes: float64(2), int64(8)\nmemory usage: 69.7 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.impute import SimpleImputer","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:10.778166Z","iopub.execute_input":"2024-09-24T11:37:10.778580Z","iopub.status.idle":"2024-09-24T11:37:11.157059Z","shell.execute_reply.started":"2024-09-24T11:37:10.778547Z","shell.execute_reply":"2024-09-24T11:37:11.155764Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"SimImp=SimpleImputer(missing_values=np.nan, strategy='median')\nSimImp.fit(train[['Age']])\ntrain['AgeSim']=SimImp.transform(train[['Age']])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:11.158924Z","iopub.execute_input":"2024-09-24T11:37:11.159308Z","iopub.status.idle":"2024-09-24T11:37:11.173808Z","shell.execute_reply.started":"2024-09-24T11:37:11.159279Z","shell.execute_reply":"2024-09-24T11:37:11.172501Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"train.loc[train['Age'].isnull()]","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:11.175825Z","iopub.execute_input":"2024-09-24T11:37:11.176211Z","iopub.status.idle":"2024-09-24T11:37:11.205025Z","shell.execute_reply.started":"2024-09-24T11:37:11.176171Z","shell.execute_reply":"2024-09-24T11:37:11.203401Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass  Sex  Age  SibSp  Parch     Fare  Embarked  \\\n5              6         0       3    1  NaN      0      0   8.4583         1   \n17            18         1       2    1  NaN      0      0  13.0000         2   \n19            20         1       3    0  NaN      0      0   7.2250         0   \n26            27         0       3    1  NaN      0      0   7.2250         0   \n28            29         1       3    0  NaN      0      0   7.8792         1   \n..           ...       ...     ...  ...  ...    ...    ...      ...       ...   \n859          860         0       3    1  NaN      0      0   7.2292         0   \n863          864         0       3    0  NaN      8      2  69.5500         2   \n868          869         0       3    1  NaN      0      0   9.5000         2   \n878          879         0       3    1  NaN      0      0   7.8958         2   \n888          889         0       3    0  NaN      1      2  23.4500         2   \n\n     Title  AgeSim  \n5        2    28.0  \n17       2    28.0  \n19       3    28.0  \n26       2    28.0  \n28       1    28.0  \n..     ...     ...  \n859      2    28.0  \n863      1    28.0  \n868      2    28.0  \n878      2    28.0  \n888      1    28.0  \n\n[177 rows x 11 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>AgeSim</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.4583</td>\n      <td>1</td>\n      <td>2</td>\n      <td>28.0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>18</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>2</td>\n      <td>2</td>\n      <td>28.0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>20</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.2250</td>\n      <td>0</td>\n      <td>3</td>\n      <td>28.0</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>27</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.2250</td>\n      <td>0</td>\n      <td>2</td>\n      <td>28.0</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>29</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8792</td>\n      <td>1</td>\n      <td>1</td>\n      <td>28.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>859</th>\n      <td>860</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.2292</td>\n      <td>0</td>\n      <td>2</td>\n      <td>28.0</td>\n    </tr>\n    <tr>\n      <th>863</th>\n      <td>864</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>8</td>\n      <td>2</td>\n      <td>69.5500</td>\n      <td>2</td>\n      <td>1</td>\n      <td>28.0</td>\n    </tr>\n    <tr>\n      <th>868</th>\n      <td>869</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.5000</td>\n      <td>2</td>\n      <td>2</td>\n      <td>28.0</td>\n    </tr>\n    <tr>\n      <th>878</th>\n      <td>879</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8958</td>\n      <td>2</td>\n      <td>2</td>\n      <td>28.0</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>889</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>2</td>\n      <td>1</td>\n      <td>28.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>177 rows × 11 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:11.206759Z","iopub.execute_input":"2024-09-24T11:37:11.208354Z","iopub.status.idle":"2024-09-24T11:37:11.223435Z","shell.execute_reply.started":"2024-09-24T11:37:11.208315Z","shell.execute_reply":"2024-09-24T11:37:11.221788Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Sex          891 non-null    int64  \n 4   Age          714 non-null    float64\n 5   SibSp        891 non-null    int64  \n 6   Parch        891 non-null    int64  \n 7   Fare         891 non-null    float64\n 8   Embarked     891 non-null    int64  \n 9   Title        891 non-null    int64  \n 10  AgeSim       891 non-null    float64\ndtypes: float64(3), int64(8)\nmemory usage: 76.7 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"trainSim=train.drop(['Age'], axis=1)\ntrain=train.drop(['AgeSim'],axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:11.225121Z","iopub.execute_input":"2024-09-24T11:37:11.225642Z","iopub.status.idle":"2024-09-24T11:37:11.238693Z","shell.execute_reply.started":"2024-09-24T11:37:11.225609Z","shell.execute_reply":"2024-09-24T11:37:11.237183Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":"### Multivariate imputer\nWe impute the missing values by modeling each feature with missing values as a fucntion of other features.","metadata":{}},{"cell_type":"code","source":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:41:03.188185Z","iopub.execute_input":"2024-09-24T11:41:03.188597Z","iopub.status.idle":"2024-09-24T11:41:03.193440Z","shell.execute_reply.started":"2024-09-24T11:41:03.188566Z","shell.execute_reply":"2024-09-24T11:41:03.192341Z"},"trusted":true},"execution_count":69,"outputs":[]},{"cell_type":"code","source":"MulImp=IterativeImputer(random_state=0)\nMulImp.fit(train)\ntrain['AgeMul']=MulImp.fit_transform(train[['Age']])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:41:04.206033Z","iopub.execute_input":"2024-09-24T11:41:04.206451Z","iopub.status.idle":"2024-09-24T11:41:04.250959Z","shell.execute_reply.started":"2024-09-24T11:41:04.206418Z","shell.execute_reply":"2024-09-24T11:41:04.249830Z"},"trusted":true},"execution_count":70,"outputs":[]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:11.345619Z","iopub.execute_input":"2024-09-24T11:37:11.346047Z","iopub.status.idle":"2024-09-24T11:37:11.363219Z","shell.execute_reply.started":"2024-09-24T11:37:11.346016Z","shell.execute_reply":"2024-09-24T11:37:11.360292Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Sex          891 non-null    int64  \n 4   Age          714 non-null    float64\n 5   SibSp        891 non-null    int64  \n 6   Parch        891 non-null    int64  \n 7   Fare         891 non-null    float64\n 8   Embarked     891 non-null    int64  \n 9   Title        891 non-null    int64  \n 10  AgeMul       891 non-null    float64\ndtypes: float64(3), int64(8)\nmemory usage: 76.7 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"trainMul=train.drop(['Age'], axis=1)\ntrain=train.drop(['AgeMul'],axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:41:13.072130Z","iopub.execute_input":"2024-09-24T11:41:13.072538Z","iopub.status.idle":"2024-09-24T11:41:13.079994Z","shell.execute_reply.started":"2024-09-24T11:41:13.072506Z","shell.execute_reply":"2024-09-24T11:41:13.078818Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"markdown","source":"### KNN imputer\nUsing k-Nearest Neighbors to complete the missing values","metadata":{}},{"cell_type":"code","source":"from sklearn.impute import KNNImputer\nImpKnn=KNNImputer(n_neighbors=10)\nImpKnn.fit(train)\ntrain['AgeKnn']=ImpKnn.fit_transform(train[['Age']])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:41:18.709227Z","iopub.execute_input":"2024-09-24T11:41:18.709917Z","iopub.status.idle":"2024-09-24T11:41:18.728376Z","shell.execute_reply.started":"2024-09-24T11:41:18.709883Z","shell.execute_reply":"2024-09-24T11:41:18.727276Z"},"trusted":true},"execution_count":72,"outputs":[]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:41:19.512702Z","iopub.execute_input":"2024-09-24T11:41:19.513153Z","iopub.status.idle":"2024-09-24T11:41:19.524831Z","shell.execute_reply.started":"2024-09-24T11:41:19.513098Z","shell.execute_reply":"2024-09-24T11:41:19.523754Z"},"trusted":true},"execution_count":73,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 10 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   Survived  891 non-null    int64  \n 1   Pclass    891 non-null    int64  \n 2   Sex       891 non-null    int64  \n 3   Age       714 non-null    float64\n 4   SibSp     891 non-null    int64  \n 5   Parch     891 non-null    int64  \n 6   Fare      891 non-null    float64\n 7   Embarked  891 non-null    int64  \n 8   Title     891 non-null    int64  \n 9   AgeKnn    891 non-null    float64\ndtypes: float64(3), int64(7)\nmemory usage: 69.7 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"trainKnn=train.drop(['Age'], axis=1)\ntrain=train.drop(['AgeKnn'],axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:41:20.960600Z","iopub.execute_input":"2024-09-24T11:41:20.961008Z","iopub.status.idle":"2024-09-24T11:41:20.968384Z","shell.execute_reply.started":"2024-09-24T11:41:20.960977Z","shell.execute_reply":"2024-09-24T11:41:20.967263Z"},"trusted":true},"execution_count":74,"outputs":[]},{"cell_type":"markdown","source":"### Model","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:41:27.060659Z","iopub.execute_input":"2024-09-24T11:41:27.061960Z","iopub.status.idle":"2024-09-24T11:41:27.066287Z","shell.execute_reply.started":"2024-09-24T11:41:27.061922Z","shell.execute_reply":"2024-09-24T11:41:27.065256Z"},"trusted":true},"execution_count":75,"outputs":[]},{"cell_type":"code","source":"trainKnn.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:11.461419Z","iopub.execute_input":"2024-09-24T11:37:11.461827Z","iopub.status.idle":"2024-09-24T11:37:11.482673Z","shell.execute_reply.started":"2024-09-24T11:37:11.461795Z","shell.execute_reply":"2024-09-24T11:37:11.481117Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 10 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Sex          891 non-null    int64  \n 4   SibSp        891 non-null    int64  \n 5   Parch        891 non-null    int64  \n 6   Fare         891 non-null    float64\n 7   Embarked     891 non-null    int64  \n 8   Title        891 non-null    int64  \n 9   AgeKnn       891 non-null    float64\ndtypes: float64(2), int64(8)\nmemory usage: 69.7 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"X=trainKnn.drop(['Survived'], axis=1)\ny=trainKnn['Survived']","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:41:33.599946Z","iopub.execute_input":"2024-09-24T11:41:33.600881Z","iopub.status.idle":"2024-09-24T11:41:33.606763Z","shell.execute_reply.started":"2024-09-24T11:41:33.600847Z","shell.execute_reply":"2024-09-24T11:41:33.605566Z"},"trusted":true},"execution_count":76,"outputs":[]},{"cell_type":"code","source":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:41:56.595422Z","iopub.execute_input":"2024-09-24T11:41:56.596366Z","iopub.status.idle":"2024-09-24T11:41:56.603743Z","shell.execute_reply.started":"2024-09-24T11:41:56.596331Z","shell.execute_reply":"2024-09-24T11:41:56.602613Z"},"trusted":true},"execution_count":77,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"### Linear models\nThe linear models set of methods in which the target value is expected to be a linear combination of the features. In mathematical notation, the prediced function is given by \n$$ y_{train}=\\omega_0+\\omega_1 x_1+\\omega_2 x_2+... +\\omega_n x_n $$\nThe loss function is given by\n$$L(w)=\\|X_{\\text{train}}w -y_{\\text{train}}\\|_2^2+\\text{penalty function}.$$\n#### Rigde\nPenalty function is defined by $p(\\omega)=\\frac{1}{2}\\|\\omega\\|^2_2$.\n#### Lasso\n$p(\\omega)=\\|\\omega\\|_1$.\n#### Elastic\n$p(\\omega)=\\frac{1-\\rho}{2}\\|\\omega\\|^2_2+\\rho \\|\\omega\\|_1$.\n\n     ","metadata":{}},{"cell_type":"markdown","source":"### Rigde classification\nThe loss function is given by\n $$L(w)=\\|X_{\\text{train}}w -y_{\\text{train}}\\|_2^2+\\alpha \\|w\\|^2_2$$\nTo minimize the loss function $L$, we use the gradient method, which is defined as follow\n$$w_{n+1}=w_n+\\lambda \\nabla L(w_n)$$","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, auc, accuracy_score,roc_auc_score, precision_score, roc_curve\nfrom sklearn import linear_model\nLnRg=linear_model.RidgeClassifier()\nLnRg.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:43:07.861782Z","iopub.execute_input":"2024-09-24T11:43:07.862752Z","iopub.status.idle":"2024-09-24T11:43:07.876780Z","shell.execute_reply.started":"2024-09-24T11:43:07.862701Z","shell.execute_reply":"2024-09-24T11:43:07.875556Z"},"trusted":true},"execution_count":78,"outputs":[{"execution_count":78,"output_type":"execute_result","data":{"text/plain":"RidgeClassifier()","text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RidgeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RidgeClassifier</label><div class=\"sk-toggleable__content\"><pre>RidgeClassifier()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Training set')\nprint('Matrix confusion: ', confusion_matrix(y_train, y_pred_train))\nprint('accuracy score: ', accuracy_score(y_train, y_pred_train))\nprint('Validation set')\nprint(confusion_matrix(y_val, LnRg.predict(X_val)))\nprint('Accuracy score', accuracy_score(y_val, LnRg.predict(X_val)))","metadata":{"execution":{"iopub.status.busy":"2024-09-24T12:17:53.959643Z","iopub.execute_input":"2024-09-24T12:17:53.960098Z","iopub.status.idle":"2024-09-24T12:17:53.975878Z","shell.execute_reply.started":"2024-09-24T12:17:53.960069Z","shell.execute_reply":"2024-09-24T12:17:53.974900Z"},"trusted":true},"execution_count":119,"outputs":[{"name":"stdout","text":"Training set\nMatrix confusion:  [[386  57]\n [ 81 188]]\naccuracy score:  0.8061797752808989\nValidation set\n[[95 11]\n [26 47]]\nAccuracy score 0.7932960893854749\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Logistic regression\nThe loss function is defined by \n$$L(w)=\\frac{1}{n}\\sum \\left( -y_i\\log (f(w_ix_i))-(1-y_i)\\log (1-f(w_ix_i)) \\right)+ \\text{penalty function} $$\nwhere $f$ is the logistic function, $f(s)=\\frac{1}{1+e^{-s}}.$\n- The penalty function: $l1, l2 \\text{ or Elasticnet} $.\n-  Optimization method: lbfgs, liblinear, newton-cg, newton-cholesky, sag, saga. Default is 'lbfgs'","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nLogReg=LogisticRegression(max_iter=10000)\nLogReg.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T12:05:28.801711Z","iopub.execute_input":"2024-09-24T12:05:28.802705Z","iopub.status.idle":"2024-09-24T12:05:28.851164Z","shell.execute_reply.started":"2024-09-24T12:05:28.802655Z","shell.execute_reply":"2024-09-24T12:05:28.850084Z"},"trusted":true},"execution_count":108,"outputs":[{"execution_count":108,"output_type":"execute_result","data":{"text/plain":"LogisticRegression(max_iter=10000)","text/html":"<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=10000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=10000)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Resultats on the training set:')\nprint('Congusion matrix: ', confusion_matrix(y_train, LogReg.predict(X_train)))\nprint('Accuracy score: ', accuracy_score(y_train, LogReg.predict(X_train)))\nprint('Roc auc score: ', roc_auc_score(y_train,  LogReg.predict(X_train)))\nprint('Resultats on the val set:')\nprint('Congusion matrix: ', confusion_matrix(y_val, LogReg.predict(X_val)))\nprint('Accuracy score: ', accuracy_score(y_val, LogReg.predict(X_val)))\nprint('Roc-AUC score: ',roc_auc_score(y_val,  LogReg.predict(X_val)))","metadata":{"execution":{"iopub.status.busy":"2024-09-24T12:13:47.218968Z","iopub.execute_input":"2024-09-24T12:13:47.219352Z","iopub.status.idle":"2024-09-24T12:13:47.245573Z","shell.execute_reply.started":"2024-09-24T12:13:47.219325Z","shell.execute_reply":"2024-09-24T12:13:47.244487Z"},"trusted":true},"execution_count":118,"outputs":[{"name":"stdout","text":"Resultats on the training set:\nCongusion matrix:  [[384  59]\n [ 82 187]]\nAccuracy score:  0.8019662921348315\nRoc auc score:  0.7809922210007805\nResultats on the val set:\nCongusion matrix:  [[94 12]\n [24 49]]\nAccuracy score:  0.7988826815642458\nRoc-AUC score:  0.7790126647712587\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### SGDClassification\n - We use the SGD (mini-batch) to optimize the loss function.\n -Loss function: hinge (that gives the SVM), log-loss (logistic regression), perceptron.\n -Penalty function: $l_1, l_2 \\text{ or elasticnet}$\n","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import SGDClassifier","metadata":{"execution":{"iopub.status.busy":"2024-09-24T11:37:11.741056Z","iopub.execute_input":"2024-09-24T11:37:11.741511Z","iopub.status.idle":"2024-09-24T11:37:11.750427Z","shell.execute_reply.started":"2024-09-24T11:37:11.741472Z","shell.execute_reply":"2024-09-24T11:37:11.748928Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"SgdClf=SGDClassifier(loss='log_loss', tol=None, max_iter=200000)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T12:24:20.982403Z","iopub.execute_input":"2024-09-24T12:24:20.982829Z","iopub.status.idle":"2024-09-24T12:24:20.987961Z","shell.execute_reply.started":"2024-09-24T12:24:20.982798Z","shell.execute_reply":"2024-09-24T12:24:20.986777Z"},"trusted":true},"execution_count":142,"outputs":[]},{"cell_type":"code","source":"SgdClf.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T12:24:22.320192Z","iopub.execute_input":"2024-09-24T12:24:22.320589Z","iopub.status.idle":"2024-09-24T12:24:37.538773Z","shell.execute_reply.started":"2024-09-24T12:24:22.320558Z","shell.execute_reply":"2024-09-24T12:24:37.537695Z"},"trusted":true},"execution_count":143,"outputs":[{"execution_count":143,"output_type":"execute_result","data":{"text/plain":"SGDClassifier(loss='log_loss', max_iter=200000, tol=None)","text/html":"<style>#sk-container-id-11 {color: black;background-color: white;}#sk-container-id-11 pre{padding: 0;}#sk-container-id-11 div.sk-toggleable {background-color: white;}#sk-container-id-11 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-11 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-11 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-11 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-11 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-11 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-11 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-11 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-11 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-11 div.sk-item {position: relative;z-index: 1;}#sk-container-id-11 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-11 div.sk-item::before, #sk-container-id-11 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-11 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-11 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-11 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-11 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-11 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-11 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-11 div.sk-label-container {text-align: center;}#sk-container-id-11 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-11 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDClassifier(loss=&#x27;log_loss&#x27;, max_iter=200000, tol=None)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier(loss=&#x27;log_loss&#x27;, max_iter=200000, tol=None)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Resultats on the training set:')\nprint('Congusion matrix: ', confusion_matrix(y_train, SgdClf.predict(X_train)))\nprint('Accuracy score: ', accuracy_score(y_train, SgdClf.predict(X_train)))\nprint('Roc auc score: ', roc_auc_score(y_train,  SgdClf.predict(X_train)))\nprint('Resultats on the val set:')\nprint('Congusion matrix: ', confusion_matrix(y_val, SgdClf.predict(X_val)))\nprint('Accuracy score: ', accuracy_score(y_val, SgdClf.predict(X_val)))\nprint('Roc-AUC score: ',roc_auc_score(y_val,  SgdClf.predict(X_val)))","metadata":{"execution":{"iopub.status.busy":"2024-09-24T12:48:20.074196Z","iopub.execute_input":"2024-09-24T12:48:20.074920Z","iopub.status.idle":"2024-09-24T12:48:20.117501Z","shell.execute_reply.started":"2024-09-24T12:48:20.074873Z","shell.execute_reply":"2024-09-24T12:48:20.116288Z"},"trusted":true},"execution_count":145,"outputs":[{"name":"stdout","text":"Resultats on the training set:\nCongusion matrix:  [[372  71]\n [ 77 192]]\nAccuracy score:  0.7921348314606742\nRoc auc score:  0.7767418832394875\nResultats on the val set:\nCongusion matrix:  [[91 15]\n [21 52]]\nAccuracy score:  0.7988826815642458\nRoc-AUC score:  0.7854096665805118\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}