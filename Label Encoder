{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3409702c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:19.750070Z",
     "iopub.status.busy": "2024-09-06T10:39:19.749570Z",
     "iopub.status.idle": "2024-09-06T10:39:20.738477Z",
     "shell.execute_reply": "2024-09-06T10:39:20.736754Z"
    },
    "papermill": {
     "duration": 1.012838,
     "end_time": "2024-09-06T10:39:20.741359",
     "exception": false,
     "start_time": "2024-09-06T10:39:19.728521",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a65f645c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:20.782654Z",
     "iopub.status.busy": "2024-09-06T10:39:20.781467Z",
     "iopub.status.idle": "2024-09-06T10:39:22.157569Z",
     "shell.execute_reply": "2024-09-06T10:39:22.156274Z"
    },
    "papermill": {
     "duration": 1.399908,
     "end_time": "2024-09-06T10:39:22.161023",
     "exception": false,
     "start_time": "2024-09-06T10:39:20.761115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d6ae625c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:22.206570Z",
     "iopub.status.busy": "2024-09-06T10:39:22.206111Z",
     "iopub.status.idle": "2024-09-06T10:39:22.246563Z",
     "shell.execute_reply": "2024-09-06T10:39:22.244788Z"
    },
    "papermill": {
     "duration": 0.070344,
     "end_time": "2024-09-06T10:39:22.250432",
     "exception": false,
     "start_time": "2024-09-06T10:39:22.180088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train=pd.read_csv('/kaggle/input/titanic/train.csv')\n",
    "test= pd.read_csv('/kaggle/input/titanic/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "63e4a3b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:22.312404Z",
     "iopub.status.busy": "2024-09-06T10:39:22.310959Z",
     "iopub.status.idle": "2024-09-06T10:39:22.325437Z",
     "shell.execute_reply": "2024-09-06T10:39:22.324026Z"
    },
    "papermill": {
     "duration": 0.051109,
     "end_time": "2024-09-06T10:39:22.329933",
     "exception": false,
     "start_time": "2024-09-06T10:39:22.278824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
       "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "96b2f8cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:22.373511Z",
     "iopub.status.busy": "2024-09-06T10:39:22.372586Z",
     "iopub.status.idle": "2024-09-06T10:39:22.402522Z",
     "shell.execute_reply": "2024-09-06T10:39:22.401335Z"
    },
    "papermill": {
     "duration": 0.053556,
     "end_time": "2024-09-06T10:39:22.405086",
     "exception": false,
     "start_time": "2024-09-06T10:39:22.351530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "22c8c738",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:22.445378Z",
     "iopub.status.busy": "2024-09-06T10:39:22.444982Z",
     "iopub.status.idle": "2024-09-06T10:39:22.476166Z",
     "shell.execute_reply": "2024-09-06T10:39:22.474462Z"
    },
    "papermill": {
     "duration": 0.054612,
     "end_time": "2024-09-06T10:39:22.479031",
     "exception": false,
     "start_time": "2024-09-06T10:39:22.424419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f0a96444",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:22.522174Z",
     "iopub.status.busy": "2024-09-06T10:39:22.521711Z",
     "iopub.status.idle": "2024-09-06T10:39:22.531331Z",
     "shell.execute_reply": "2024-09-06T10:39:22.529776Z"
    },
    "papermill": {
     "duration": 0.033679,
     "end_time": "2024-09-06T10:39:22.534655",
     "exception": false,
     "start_time": "2024-09-06T10:39:22.500976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(418, 11)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cd4c787d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:22.577673Z",
     "iopub.status.busy": "2024-09-06T10:39:22.577235Z",
     "iopub.status.idle": "2024-09-06T10:39:22.588102Z",
     "shell.execute_reply": "2024-09-06T10:39:22.586847Z"
    },
    "papermill": {
     "duration": 0.035323,
     "end_time": "2024-09-06T10:39:22.590665",
     "exception": false,
     "start_time": "2024-09-06T10:39:22.555342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train=train.drop(['Cabin', 'Ticket'], axis=1)\n",
    "test=test.drop(['Cabin', 'Ticket'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "974d9ea2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:22.633497Z",
     "iopub.status.busy": "2024-09-06T10:39:22.633081Z",
     "iopub.status.idle": "2024-09-06T10:39:22.649342Z",
     "shell.execute_reply": "2024-09-06T10:39:22.648109Z"
    },
    "papermill": {
     "duration": 0.041539,
     "end_time": "2024-09-06T10:39:22.652314",
     "exception": false,
     "start_time": "2024-09-06T10:39:22.610775",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['Title']=train['Name'].str.extract(r'(\\w+)\\.')\n",
    "test['Title']=test['Name'].str.extract(r'(\\w+)\\.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "989b96a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:22.695929Z",
     "iopub.status.busy": "2024-09-06T10:39:22.694606Z",
     "iopub.status.idle": "2024-09-06T10:39:22.712257Z",
     "shell.execute_reply": "2024-09-06T10:39:22.710974Z"
    },
    "papermill": {
     "duration": 0.04222,
     "end_time": "2024-09-06T10:39:22.715264",
     "exception": false,
     "start_time": "2024-09-06T10:39:22.673044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['Title']=train['Title'].replace([ 'Lady','Don', 'Rev', 'Dr', 'Major','Col', 'Sir','Capt', 'Countess','Jonkheer'], 'rare')\n",
    "train['Title']=train['Title'].replace(['Mlle','Ms'], 'Mrs')\n",
    "train['Title']=train['Title'].replace('Mme', 'Miss')\n",
    "test['Title']=test['Title'].replace([ 'Lady','Don','Dona', 'Rev', 'Dr', 'Major','Col', 'Sir','Capt', 'Countess','Jonkheer'], 'rare')\n",
    "test['Title']=test['Title'].replace(['Mlle','Ms'], 'Mrs')\n",
    "test['Title']=test['Title'].replace('Mme', 'Miss')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4b4e6ff2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:22.756517Z",
     "iopub.status.busy": "2024-09-06T10:39:22.756021Z",
     "iopub.status.idle": "2024-09-06T10:39:22.765861Z",
     "shell.execute_reply": "2024-09-06T10:39:22.764551Z"
    },
    "papermill": {
     "duration": 0.033736,
     "end_time": "2024-09-06T10:39:22.768543",
     "exception": false,
     "start_time": "2024-09-06T10:39:22.734807",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train=train.drop('Name', axis=1)\n",
    "test=test.drop('Name', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "870e8bae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:22.810283Z",
     "iopub.status.busy": "2024-09-06T10:39:22.809870Z",
     "iopub.status.idle": "2024-09-06T10:39:22.827220Z",
     "shell.execute_reply": "2024-09-06T10:39:22.826043Z"
    },
    "papermill": {
     "duration": 0.042087,
     "end_time": "2024-09-06T10:39:22.830332",
     "exception": false,
     "start_time": "2024-09-06T10:39:22.788245",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch     Fare  \\\n",
       "0            1         0       3    male  22.0      1      0   7.2500   \n",
       "1            2         1       1  female  38.0      1      0  71.2833   \n",
       "2            3         1       3  female  26.0      0      0   7.9250   \n",
       "3            4         1       1  female  35.0      1      0  53.1000   \n",
       "4            5         0       3    male  35.0      0      0   8.0500   \n",
       "\n",
       "  Embarked Title  \n",
       "0        S    Mr  \n",
       "1        C   Mrs  \n",
       "2        S  Miss  \n",
       "3        S   Mrs  \n",
       "4        S    Mr  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9f9851c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:22.874858Z",
     "iopub.status.busy": "2024-09-06T10:39:22.874354Z",
     "iopub.status.idle": "2024-09-06T10:39:23.136037Z",
     "shell.execute_reply": "2024-09-06T10:39:23.134423Z"
    },
    "papermill": {
     "duration": 0.286967,
     "end_time": "2024-09-06T10:39:23.139292",
     "exception": false,
     "start_time": "2024-09-06T10:39:22.852325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6964c9dd",
   "metadata": {
    "papermill": {
     "duration": 0.018971,
     "end_time": "2024-09-06T10:39:23.178144",
     "exception": false,
     "start_time": "2024-09-06T10:39:23.159173",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Label Encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "af657da9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:23.219259Z",
     "iopub.status.busy": "2024-09-06T10:39:23.218675Z",
     "iopub.status.idle": "2024-09-06T10:39:23.225029Z",
     "shell.execute_reply": "2024-09-06T10:39:23.223574Z"
    },
    "papermill": {
     "duration": 0.0305,
     "end_time": "2024-09-06T10:39:23.228029",
     "exception": false,
     "start_time": "2024-09-06T10:39:23.197529",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Enco=LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bcd26b62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:23.273217Z",
     "iopub.status.busy": "2024-09-06T10:39:23.272784Z",
     "iopub.status.idle": "2024-09-06T10:39:23.282339Z",
     "shell.execute_reply": "2024-09-06T10:39:23.280936Z"
    },
    "papermill": {
     "duration": 0.034038,
     "end_time": "2024-09-06T10:39:23.285085",
     "exception": false,
     "start_time": "2024-09-06T10:39:23.251047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Enco.fit(train['Sex'])\n",
    "train['Sex']=Enco.transform(train['Sex'])\n",
    "test['Sex']=Enco.transform(test['Sex'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0300d07b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:23.327914Z",
     "iopub.status.busy": "2024-09-06T10:39:23.327443Z",
     "iopub.status.idle": "2024-09-06T10:39:23.337105Z",
     "shell.execute_reply": "2024-09-06T10:39:23.334945Z"
    },
    "papermill": {
     "duration": 0.035154,
     "end_time": "2024-09-06T10:39:23.340479",
     "exception": false,
     "start_time": "2024-09-06T10:39:23.305325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Enco.fit(train['Embarked'])\n",
    "train['Embarked']=Enco.transform(train['Embarked'])\n",
    "test['Embarked']=Enco.transform(test['Embarked'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "518524c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:23.383857Z",
     "iopub.status.busy": "2024-09-06T10:39:23.382918Z",
     "iopub.status.idle": "2024-09-06T10:39:23.390508Z",
     "shell.execute_reply": "2024-09-06T10:39:23.389320Z"
    },
    "papermill": {
     "duration": 0.031642,
     "end_time": "2024-09-06T10:39:23.393130",
     "exception": false,
     "start_time": "2024-09-06T10:39:23.361488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Enco.fit(train['Title'])\n",
    "train['Title']=Enco.transform(train['Title'])\n",
    "test['Title']=Enco.transform(test['Title'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d4538040",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:23.434421Z",
     "iopub.status.busy": "2024-09-06T10:39:23.433936Z",
     "iopub.status.idle": "2024-09-06T10:39:23.452138Z",
     "shell.execute_reply": "2024-09-06T10:39:23.450768Z"
    },
    "papermill": {
     "duration": 0.041806,
     "end_time": "2024-09-06T10:39:23.454536",
     "exception": false,
     "start_time": "2024-09-06T10:39:23.412730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked  \\\n",
       "0            1         0       3    1  22.0      1      0   7.2500         2   \n",
       "1            2         1       1    0  38.0      1      0  71.2833         0   \n",
       "2            3         1       3    0  26.0      0      0   7.9250         2   \n",
       "3            4         1       1    0  35.0      1      0  53.1000         2   \n",
       "4            5         0       3    1  35.0      0      0   8.0500         2   \n",
       "\n",
       "   Title  \n",
       "0      2  \n",
       "1      3  \n",
       "2      1  \n",
       "3      3  \n",
       "4      2  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ec4bcb2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:23.496416Z",
     "iopub.status.busy": "2024-09-06T10:39:23.495937Z",
     "iopub.status.idle": "2024-09-06T10:39:23.512940Z",
     "shell.execute_reply": "2024-09-06T10:39:23.511441Z"
    },
    "papermill": {
     "duration": 0.041115,
     "end_time": "2024-09-06T10:39:23.515485",
     "exception": false,
     "start_time": "2024-09-06T10:39:23.474370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked  Title\n",
       "0          892       3    1  34.5      0      0   7.8292         1      2\n",
       "1          893       3    0  47.0      1      0   7.0000         2      3\n",
       "2          894       2    1  62.0      0      0   9.6875         1      2\n",
       "3          895       3    1  27.0      0      0   8.6625         2      2\n",
       "4          896       3    0  22.0      1      1  12.2875         2      3"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "92106344",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:23.559157Z",
     "iopub.status.busy": "2024-09-06T10:39:23.557654Z",
     "iopub.status.idle": "2024-09-06T10:39:23.573172Z",
     "shell.execute_reply": "2024-09-06T10:39:23.571566Z"
    },
    "papermill": {
     "duration": 0.04037,
     "end_time": "2024-09-06T10:39:23.575922",
     "exception": false,
     "start_time": "2024-09-06T10:39:23.535552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 10 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Sex          891 non-null    int64  \n",
      " 4   Age          714 non-null    float64\n",
      " 5   SibSp        891 non-null    int64  \n",
      " 6   Parch        891 non-null    int64  \n",
      " 7   Fare         891 non-null    float64\n",
      " 8   Embarked     891 non-null    int64  \n",
      " 9   Title        891 non-null    int64  \n",
      "dtypes: float64(2), int64(8)\n",
      "memory usage: 69.7 KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c8bc17a",
   "metadata": {
    "papermill": {
     "duration": 0.019831,
     "end_time": "2024-09-06T10:39:23.615926",
     "exception": false,
     "start_time": "2024-09-06T10:39:23.596095",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Simple imputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2bf2704a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:23.725429Z",
     "iopub.status.busy": "2024-09-06T10:39:23.724894Z",
     "iopub.status.idle": "2024-09-06T10:39:23.740803Z",
     "shell.execute_reply": "2024-09-06T10:39:23.739179Z"
    },
    "papermill": {
     "duration": 0.041261,
     "end_time": "2024-09-06T10:39:23.743879",
     "exception": false,
     "start_time": "2024-09-06T10:39:23.702618",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 10 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Sex          891 non-null    int64  \n",
      " 4   Age          714 non-null    float64\n",
      " 5   SibSp        891 non-null    int64  \n",
      " 6   Parch        891 non-null    int64  \n",
      " 7   Fare         891 non-null    float64\n",
      " 8   Embarked     891 non-null    int64  \n",
      " 9   Title        891 non-null    int64  \n",
      "dtypes: float64(2), int64(8)\n",
      "memory usage: 69.7 KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b4b3857d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:23.787824Z",
     "iopub.status.busy": "2024-09-06T10:39:23.787364Z",
     "iopub.status.idle": "2024-09-06T10:39:24.083325Z",
     "shell.execute_reply": "2024-09-06T10:39:24.082048Z"
    },
    "papermill": {
     "duration": 0.322023,
     "end_time": "2024-09-06T10:39:24.086390",
     "exception": false,
     "start_time": "2024-09-06T10:39:23.764367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.impute import SimpleImputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c3d5c209",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:24.130956Z",
     "iopub.status.busy": "2024-09-06T10:39:24.130528Z",
     "iopub.status.idle": "2024-09-06T10:39:24.145489Z",
     "shell.execute_reply": "2024-09-06T10:39:24.144204Z"
    },
    "papermill": {
     "duration": 0.040094,
     "end_time": "2024-09-06T10:39:24.148571",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.108477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "SimImp=SimpleImputer(missing_values=np.nan, strategy='median')\n",
    "SimImp.fit(train[['Age']])\n",
    "train['AgeSim']=SimImp.transform(train[['Age']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c34046c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:24.191548Z",
     "iopub.status.busy": "2024-09-06T10:39:24.191104Z",
     "iopub.status.idle": "2024-09-06T10:39:24.215099Z",
     "shell.execute_reply": "2024-09-06T10:39:24.213759Z"
    },
    "papermill": {
     "duration": 0.048529,
     "end_time": "2024-09-06T10:39:24.217678",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.169149",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "      <th>AgeSim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.8792</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>859</th>\n",
       "      <td>860</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2292</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863</th>\n",
       "      <td>864</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>69.5500</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868</th>\n",
       "      <td>869</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.5000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>879</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>177 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  Sex  Age  SibSp  Parch     Fare  Embarked  \\\n",
       "5              6         0       3    1  NaN      0      0   8.4583         1   \n",
       "17            18         1       2    1  NaN      0      0  13.0000         2   \n",
       "19            20         1       3    0  NaN      0      0   7.2250         0   \n",
       "26            27         0       3    1  NaN      0      0   7.2250         0   \n",
       "28            29         1       3    0  NaN      0      0   7.8792         1   \n",
       "..           ...       ...     ...  ...  ...    ...    ...      ...       ...   \n",
       "859          860         0       3    1  NaN      0      0   7.2292         0   \n",
       "863          864         0       3    0  NaN      8      2  69.5500         2   \n",
       "868          869         0       3    1  NaN      0      0   9.5000         2   \n",
       "878          879         0       3    1  NaN      0      0   7.8958         2   \n",
       "888          889         0       3    0  NaN      1      2  23.4500         2   \n",
       "\n",
       "     Title  AgeSim  \n",
       "5        2    28.0  \n",
       "17       2    28.0  \n",
       "19       3    28.0  \n",
       "26       2    28.0  \n",
       "28       1    28.0  \n",
       "..     ...     ...  \n",
       "859      2    28.0  \n",
       "863      1    28.0  \n",
       "868      2    28.0  \n",
       "878      2    28.0  \n",
       "888      1    28.0  \n",
       "\n",
       "[177 rows x 11 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.loc[train['Age'].isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "98ef1393",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:24.262044Z",
     "iopub.status.busy": "2024-09-06T10:39:24.261538Z",
     "iopub.status.idle": "2024-09-06T10:39:24.274727Z",
     "shell.execute_reply": "2024-09-06T10:39:24.273380Z"
    },
    "papermill": {
     "duration": 0.038782,
     "end_time": "2024-09-06T10:39:24.277579",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.238797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Sex          891 non-null    int64  \n",
      " 4   Age          714 non-null    float64\n",
      " 5   SibSp        891 non-null    int64  \n",
      " 6   Parch        891 non-null    int64  \n",
      " 7   Fare         891 non-null    float64\n",
      " 8   Embarked     891 non-null    int64  \n",
      " 9   Title        891 non-null    int64  \n",
      " 10  AgeSim       891 non-null    float64\n",
      "dtypes: float64(3), int64(8)\n",
      "memory usage: 76.7 KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "df1ed6fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:24.323619Z",
     "iopub.status.busy": "2024-09-06T10:39:24.323151Z",
     "iopub.status.idle": "2024-09-06T10:39:24.333831Z",
     "shell.execute_reply": "2024-09-06T10:39:24.332075Z"
    },
    "papermill": {
     "duration": 0.037841,
     "end_time": "2024-09-06T10:39:24.337185",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.299344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trainSim=train.drop(['Age'], axis=1)\n",
    "train=train.drop(['AgeSim'],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93a881ee",
   "metadata": {
    "papermill": {
     "duration": 0.020629,
     "end_time": "2024-09-06T10:39:24.378976",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.358347",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Multivariate imputer\n",
    "We impute the missing values by modeling each feature with missing values as a fucntion of other features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a9eadf9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:24.424395Z",
     "iopub.status.busy": "2024-09-06T10:39:24.423920Z",
     "iopub.status.idle": "2024-09-06T10:39:24.435240Z",
     "shell.execute_reply": "2024-09-06T10:39:24.433940Z"
    },
    "papermill": {
     "duration": 0.037774,
     "end_time": "2024-09-06T10:39:24.438282",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.400508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.experimental import enable_iterative_imputer\n",
    "from sklearn.impute import IterativeImputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a7e3ba56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:24.484635Z",
     "iopub.status.busy": "2024-09-06T10:39:24.483801Z",
     "iopub.status.idle": "2024-09-06T10:39:24.555263Z",
     "shell.execute_reply": "2024-09-06T10:39:24.554093Z"
    },
    "papermill": {
     "duration": 0.0981,
     "end_time": "2024-09-06T10:39:24.558477",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.460377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "MulImp=IterativeImputer(random_state=0)\n",
    "MulImp.fit(train)\n",
    "train['AgeMul']=MulImp.fit_transform(train[['Age']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4f64a2c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:24.603923Z",
     "iopub.status.busy": "2024-09-06T10:39:24.603452Z",
     "iopub.status.idle": "2024-09-06T10:39:24.617574Z",
     "shell.execute_reply": "2024-09-06T10:39:24.616253Z"
    },
    "papermill": {
     "duration": 0.039984,
     "end_time": "2024-09-06T10:39:24.620285",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.580301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Sex          891 non-null    int64  \n",
      " 4   Age          714 non-null    float64\n",
      " 5   SibSp        891 non-null    int64  \n",
      " 6   Parch        891 non-null    int64  \n",
      " 7   Fare         891 non-null    float64\n",
      " 8   Embarked     891 non-null    int64  \n",
      " 9   Title        891 non-null    int64  \n",
      " 10  AgeMul       891 non-null    float64\n",
      "dtypes: float64(3), int64(8)\n",
      "memory usage: 76.7 KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "263b3998",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:24.665807Z",
     "iopub.status.busy": "2024-09-06T10:39:24.664833Z",
     "iopub.status.idle": "2024-09-06T10:39:24.672771Z",
     "shell.execute_reply": "2024-09-06T10:39:24.671473Z"
    },
    "papermill": {
     "duration": 0.033733,
     "end_time": "2024-09-06T10:39:24.675487",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.641754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trainMul=train.drop(['Age'], axis=1)\n",
    "train=train.drop(['AgeMul'],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "772133be",
   "metadata": {
    "papermill": {
     "duration": 0.021937,
     "end_time": "2024-09-06T10:39:24.719152",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.697215",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### KNN imputer\n",
    "Using k-Nearest Neighbors to complete the missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f966db58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:24.764413Z",
     "iopub.status.busy": "2024-09-06T10:39:24.763953Z",
     "iopub.status.idle": "2024-09-06T10:39:24.786617Z",
     "shell.execute_reply": "2024-09-06T10:39:24.785488Z"
    },
    "papermill": {
     "duration": 0.049072,
     "end_time": "2024-09-06T10:39:24.789587",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.740515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.impute import KNNImputer\n",
    "ImpKnn=KNNImputer(n_neighbors=10)\n",
    "ImpKnn.fit(train)\n",
    "train['AgeKnn']=ImpKnn.fit_transform(train[['Age']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a2b74382",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:24.834440Z",
     "iopub.status.busy": "2024-09-06T10:39:24.834070Z",
     "iopub.status.idle": "2024-09-06T10:39:24.847602Z",
     "shell.execute_reply": "2024-09-06T10:39:24.846048Z"
    },
    "papermill": {
     "duration": 0.03901,
     "end_time": "2024-09-06T10:39:24.850209",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.811199",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Sex          891 non-null    int64  \n",
      " 4   Age          714 non-null    float64\n",
      " 5   SibSp        891 non-null    int64  \n",
      " 6   Parch        891 non-null    int64  \n",
      " 7   Fare         891 non-null    float64\n",
      " 8   Embarked     891 non-null    int64  \n",
      " 9   Title        891 non-null    int64  \n",
      " 10  AgeKnn       891 non-null    float64\n",
      "dtypes: float64(3), int64(8)\n",
      "memory usage: 76.7 KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "201314bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:24.893910Z",
     "iopub.status.busy": "2024-09-06T10:39:24.893491Z",
     "iopub.status.idle": "2024-09-06T10:39:24.901449Z",
     "shell.execute_reply": "2024-09-06T10:39:24.900445Z"
    },
    "papermill": {
     "duration": 0.032799,
     "end_time": "2024-09-06T10:39:24.903960",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.871161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trainKnn=train.drop(['Age'], axis=1)\n",
    "train=train.drop(['AgeKnn'],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "386e006e",
   "metadata": {
    "papermill": {
     "duration": 0.020467,
     "end_time": "2024-09-06T10:39:24.945233",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.924766",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ab8d89c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:24.988916Z",
     "iopub.status.busy": "2024-09-06T10:39:24.988487Z",
     "iopub.status.idle": "2024-09-06T10:39:24.994137Z",
     "shell.execute_reply": "2024-09-06T10:39:24.992918Z"
    },
    "papermill": {
     "duration": 0.030976,
     "end_time": "2024-09-06T10:39:24.997059",
     "exception": false,
     "start_time": "2024-09-06T10:39:24.966083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "025284cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:25.043882Z",
     "iopub.status.busy": "2024-09-06T10:39:25.043394Z",
     "iopub.status.idle": "2024-09-06T10:39:25.056551Z",
     "shell.execute_reply": "2024-09-06T10:39:25.055196Z"
    },
    "papermill": {
     "duration": 0.04019,
     "end_time": "2024-09-06T10:39:25.059708",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.019518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 10 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Sex          891 non-null    int64  \n",
      " 4   SibSp        891 non-null    int64  \n",
      " 5   Parch        891 non-null    int64  \n",
      " 6   Fare         891 non-null    float64\n",
      " 7   Embarked     891 non-null    int64  \n",
      " 8   Title        891 non-null    int64  \n",
      " 9   AgeKnn       891 non-null    float64\n",
      "dtypes: float64(2), int64(8)\n",
      "memory usage: 69.7 KB\n"
     ]
    }
   ],
   "source": [
    "trainKnn.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "60115e62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:25.107398Z",
     "iopub.status.busy": "2024-09-06T10:39:25.106957Z",
     "iopub.status.idle": "2024-09-06T10:39:25.114359Z",
     "shell.execute_reply": "2024-09-06T10:39:25.113110Z"
    },
    "papermill": {
     "duration": 0.035402,
     "end_time": "2024-09-06T10:39:25.116832",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.081430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X=trainKnn.drop(['Survived'], axis=1)\n",
    "y=trainKnn['Survived']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "85d85ce3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:25.162247Z",
     "iopub.status.busy": "2024-09-06T10:39:25.161762Z",
     "iopub.status.idle": "2024-09-06T10:39:25.173045Z",
     "shell.execute_reply": "2024-09-06T10:39:25.171776Z"
    },
    "papermill": {
     "duration": 0.037102,
     "end_time": "2024-09-06T10:39:25.175694",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.138592",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "235465a6",
   "metadata": {
    "papermill": {
     "duration": 0.020746,
     "end_time": "2024-09-06T10:39:25.217845",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.197099",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "596d06aa",
   "metadata": {
    "papermill": {
     "duration": 0.020837,
     "end_time": "2024-09-06T10:39:25.259908",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.239071",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Linear models\n",
    "The linear models set of methods in which the target value is expected to be a linear combination of the features. In mathematical notation, the prediced function is given by \n",
    "$$ y_{train}=\\omega_0+\\omega_1 x_1+\\omega_2 x_2+... +\\omega_n x_n $$\n",
    "The loss function is given by\n",
    "#### Ridge regression\n",
    "$$L(w)=\\|X_{\\text{train}}w -y_{\\text{train}}\\|_2^2+\\alpha \\|w\\|^2_2$$\n",
    "####  Lasso\n",
    "$$L(w)=\\|X_{\\text{train}}w -y_{\\text{train}}\\|_2^2+\\alpha\\|w\\|_1$$\n",
    "#### Elastic-Net\n",
    "$$L(w)=\\frac{1}{2n}\\|X_{\\text{train}}w -y_{\\text{train}}\\|_2^2+\\alpha \\|w\\|_1+\\beta \\|w\\|_2^2$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af120b07",
   "metadata": {
    "papermill": {
     "duration": 0.021184,
     "end_time": "2024-09-06T10:39:25.303390",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.282206",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Rigde classification\n",
    "The loss function is given by\n",
    " $$L(w)=\\|X_{\\text{train}}w -y_{\\text{train}}\\|_2^2+\\alpha \\|w\\|^2_2$$\n",
    "To minimize the loss function $L$, we use the gradient method, which is defined as follow\n",
    "$$w_{n+1}=w_n+\\alpha \\nabla L(w_n)$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "faed9648",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:25.349360Z",
     "iopub.status.busy": "2024-09-06T10:39:25.348974Z",
     "iopub.status.idle": "2024-09-06T10:39:25.384023Z",
     "shell.execute_reply": "2024-09-06T10:39:25.382772Z"
    },
    "papermill": {
     "duration": 0.061445,
     "end_time": "2024-09-06T10:39:25.386739",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.325294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RidgeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RidgeClassifier</label><div class=\"sk-toggleable__content\"><pre>RidgeClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RidgeClassifier()"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "LnRg=linear_model.RidgeClassifier()\n",
    "LnRg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "333ac879",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:25.433139Z",
     "iopub.status.busy": "2024-09-06T10:39:25.432618Z",
     "iopub.status.idle": "2024-09-06T10:39:25.446406Z",
     "shell.execute_reply": "2024-09-06T10:39:25.445094Z"
    },
    "papermill": {
     "duration": 0.040272,
     "end_time": "2024-09-06T10:39:25.449152",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.408880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7969798657718121"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LnRg.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "53042b25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:25.495176Z",
     "iopub.status.busy": "2024-09-06T10:39:25.494669Z",
     "iopub.status.idle": "2024-09-06T10:39:25.507277Z",
     "shell.execute_reply": "2024-09-06T10:39:25.505791Z"
    },
    "papermill": {
     "duration": 0.038701,
     "end_time": "2024-09-06T10:39:25.509807",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.471106",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8101694915254237"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LnRg.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5ec91cd",
   "metadata": {
    "papermill": {
     "duration": 0.021947,
     "end_time": "2024-09-06T10:39:25.554371",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.532424",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "4bd33593",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:25.600309Z",
     "iopub.status.busy": "2024-09-06T10:39:25.599853Z",
     "iopub.status.idle": "2024-09-06T10:39:25.642392Z",
     "shell.execute_reply": "2024-09-06T10:39:25.640895Z"
    },
    "papermill": {
     "duration": 0.069133,
     "end_time": "2024-09-06T10:39:25.645552",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.576419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "LogReg=LogisticRegression()\n",
    "LogReg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5a7df77f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:25.693619Z",
     "iopub.status.busy": "2024-09-06T10:39:25.693111Z",
     "iopub.status.idle": "2024-09-06T10:39:25.706084Z",
     "shell.execute_reply": "2024-09-06T10:39:25.704765Z"
    },
    "papermill": {
     "duration": 0.040157,
     "end_time": "2024-09-06T10:39:25.708630",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.668473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.785234899328859"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LogReg.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "28b239e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:25.757439Z",
     "iopub.status.busy": "2024-09-06T10:39:25.756398Z",
     "iopub.status.idle": "2024-09-06T10:39:25.768390Z",
     "shell.execute_reply": "2024-09-06T10:39:25.767172Z"
    },
    "papermill": {
     "duration": 0.039193,
     "end_time": "2024-09-06T10:39:25.771341",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.732148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7864406779661017"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LogReg.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "bd84bd05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:25.820391Z",
     "iopub.status.busy": "2024-09-06T10:39:25.819936Z",
     "iopub.status.idle": "2024-09-06T10:39:25.840344Z",
     "shell.execute_reply": "2024-09-06T10:39:25.838939Z"
    },
    "papermill": {
     "duration": 0.047847,
     "end_time": "2024-09-06T10:39:25.842757",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.794910",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(penalty=&#x27;l1&#x27;, solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(penalty=&#x27;l1&#x27;, solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(penalty='l1', solver='liblinear')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LogReg=LogisticRegression(penalty='l1', solver='liblinear')\n",
    "LogReg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "81388f56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:25.897014Z",
     "iopub.status.busy": "2024-09-06T10:39:25.896566Z",
     "iopub.status.idle": "2024-09-06T10:39:25.908623Z",
     "shell.execute_reply": "2024-09-06T10:39:25.907410Z"
    },
    "papermill": {
     "duration": 0.040091,
     "end_time": "2024-09-06T10:39:25.911261",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.871170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7953020134228188"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LogReg.score(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "eff3dc9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:25.960419Z",
     "iopub.status.busy": "2024-09-06T10:39:25.959980Z",
     "iopub.status.idle": "2024-09-06T10:39:25.971534Z",
     "shell.execute_reply": "2024-09-06T10:39:25.970296Z"
    },
    "papermill": {
     "duration": 0.03902,
     "end_time": "2024-09-06T10:39:25.973919",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.934899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8135593220338984"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LogReg.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9984b255",
   "metadata": {
    "papermill": {
     "duration": 0.024375,
     "end_time": "2024-09-06T10:39:26.022054",
     "exception": false,
     "start_time": "2024-09-06T10:39:25.997679",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "0786144e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:26.071992Z",
     "iopub.status.busy": "2024-09-06T10:39:26.071540Z",
     "iopub.status.idle": "2024-09-06T10:39:26.092818Z",
     "shell.execute_reply": "2024-09-06T10:39:26.091492Z"
    },
    "papermill": {
     "duration": 0.049217,
     "end_time": "2024-09-06T10:39:26.095605",
     "exception": false,
     "start_time": "2024-09-06T10:39:26.046388",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SGDClassifier()"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import SGDClassifier\n",
    "LnSgd=SGDClassifier()\n",
    "LnSgd.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "44214a34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:26.147263Z",
     "iopub.status.busy": "2024-09-06T10:39:26.146828Z",
     "iopub.status.idle": "2024-09-06T10:39:26.158406Z",
     "shell.execute_reply": "2024-09-06T10:39:26.157149Z"
    },
    "papermill": {
     "duration": 0.039807,
     "end_time": "2024-09-06T10:39:26.161243",
     "exception": false,
     "start_time": "2024-09-06T10:39:26.121436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.40939597315436244"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LnSgd.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "4162ee3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:26.212554Z",
     "iopub.status.busy": "2024-09-06T10:39:26.212155Z",
     "iopub.status.idle": "2024-09-06T10:39:26.223437Z",
     "shell.execute_reply": "2024-09-06T10:39:26.222112Z"
    },
    "papermill": {
     "duration": 0.040308,
     "end_time": "2024-09-06T10:39:26.226163",
     "exception": false,
     "start_time": "2024-09-06T10:39:26.185855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.41694915254237286"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LnSgd.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "358bb8d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:26.277470Z",
     "iopub.status.busy": "2024-09-06T10:39:26.277090Z",
     "iopub.status.idle": "2024-09-06T10:39:26.282362Z",
     "shell.execute_reply": "2024-09-06T10:39:26.281139Z"
    },
    "papermill": {
     "duration": 0.034178,
     "end_time": "2024-09-06T10:39:26.285368",
     "exception": false,
     "start_time": "2024-09-06T10:39:26.251190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.svm import LinearSVC\n",
    "Svc=LinearSVC()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ac8b4445",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:26.336967Z",
     "iopub.status.busy": "2024-09-06T10:39:26.336354Z",
     "iopub.status.idle": "2024-09-06T10:39:26.387045Z",
     "shell.execute_reply": "2024-09-06T10:39:26.385667Z"
    },
    "papermill": {
     "duration": 0.080126,
     "end_time": "2024-09-06T10:39:26.389962",
     "exception": false,
     "start_time": "2024-09-06T10:39:26.309836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearSVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearSVC</label><div class=\"sk-toggleable__content\"><pre>LinearSVC()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearSVC()"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Svc.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b79f677a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:26.439827Z",
     "iopub.status.busy": "2024-09-06T10:39:26.439304Z",
     "iopub.status.idle": "2024-09-06T10:39:26.452655Z",
     "shell.execute_reply": "2024-09-06T10:39:26.451374Z"
    },
    "papermill": {
     "duration": 0.04151,
     "end_time": "2024-09-06T10:39:26.455398",
     "exception": false,
     "start_time": "2024-09-06T10:39:26.413888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6023489932885906"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Svc.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "716e6258",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T10:39:26.508672Z",
     "iopub.status.busy": "2024-09-06T10:39:26.508192Z",
     "iopub.status.idle": "2024-09-06T10:39:26.520443Z",
     "shell.execute_reply": "2024-09-06T10:39:26.519126Z"
    },
    "papermill": {
     "duration": 0.041749,
     "end_time": "2024-09-06T10:39:26.522954",
     "exception": false,
     "start_time": "2024-09-06T10:39:26.481205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5966101694915255"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Svc.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c66ece0",
   "metadata": {
    "papermill": {
     "duration": 0.023764,
     "end_time": "2024-09-06T10:39:26.571366",
     "exception": false,
     "start_time": "2024-09-06T10:39:26.547602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.53947,
   "end_time": "2024-09-06T10:39:27.521789",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-06T10:39:15.982319",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
